// demo.js - MedSpaSync Pro Demo Logic
// CSP-Compatible version without external dependencies

// Application State
let uploadedFiles = {
    pos: null,
    alle: null,
    aspire: null
};
let reconciliationResults = null;

// Sample data for demonstration
const sampleData = {
    pos: 'name,service,amount,date\n"Sarah Johnson","Botox Cosmetic",450.00,"2024-03-15"\n"Michael Chen","Juvederm Ultra",650.00,"2024-03-15"\n"Jennifer Smith","Dysport",380.00,"2024-03-16"\n"Robert Davis","Restylane Lyft",700.00,"2024-03-16"\n"Lisa Anderson","Botox Cosmetic",525.00,"2024-03-17"',
    alle: 'customer_name,product,points_redeemed,redemption_date\n"Sarah M Johnson","Botox Cosmetic",90,"2024-03-15"\n"Michael C Chen","Juvederm Ultra",130,"2024-03-15"\n"Jenny Smith","Dysport",76,"2024-03-16"\n"Lisa A Anderson","Botox Cosmetic",105,"2024-03-17"',
    aspire: 'member_name,treatment,reward_amount,transaction_date\n"Robert J Davis","Restylane Lyft",140.00,"2024-03-16"\n"David Wilson","Sculptra",170.00,"2024-03-17"'
};

// Simple CSV parser (no external dependency)
function parseCSV(csvText) {
    const lines = csvText.trim().split('\n');
    if (lines.length < 2) return [];
    
    const headers = lines[0].split(',').map(h => h.replace(/"/g, '').trim());
    const rows = [];
    
    for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',').map(v => v.replace(/"/g, '').trim());
        const row = {};
        headers.forEach((header, index) => {
            row[header] = values[index] || '';
        });
        rows.push(row);
    }
    
    return rows;
}

// File upload handling
function handleFileUpload(type, file) {
    if (!file) return;

    uploadedFiles[type] = file;
    
    const statusElement = document.getElementById(`${type}Status`);
    statusElement.textContent = `✓ ${file.name}`;
    statusElement.classList.add('success');
    
    const uploadArea = document.getElementById(`${type}Upload`);
    uploadArea.classList.add('active');
    
    updateReconcileButton();
    trackEvent('file_uploaded', { type, fileName: file.name });
}

// Load sample data
function loadSampleData(type) {
    const blob = new Blob([sampleData[type]], { type: 'text/csv' });
    const file = new File([blob], `sample_${type}_data.csv`, { type: 'text/csv' });
    
    uploadedFiles[type] = file;
    
    const statusElement = document.getElementById(`${type}Status`);
    statusElement.textContent = `✓ Sample ${type.toUpperCase()} data loaded`;
    statusElement.classList.add('success');
    
    const uploadArea = document.getElementById(`${type}Upload`);
    uploadArea.classList.add('active');
    
    updateReconcileButton();
    trackEvent('sample_data_loaded', { type });
}

// Update reconcile button state
function updateReconcileButton() {
    const btn = document.getElementById('reconcileBtn');
    const hasAllFiles = uploadedFiles.pos && uploadedFiles.alle && uploadedFiles.aspire;
    
    if (hasAllFiles) {
        btn.disabled = false;
        btn.textContent = 'Begin AI Reconciliation Process';
    } else {
        const count = Object.values(uploadedFiles).filter(f => f).length;
        btn.textContent = `Select ${3 - count} more file${3 - count !== 1 ? 's' : ''} to continue`;
    }
}

// Start reconciliation process
async function startReconciliation() {
    if (!uploadedFiles.pos || !uploadedFiles.alle || !uploadedFiles.aspire) {
        showError('Please upload all three files before starting reconciliation.');
        return;
    }

    // Update UI state
    updateStepIndicator('processing');
    showSection('processingSection');

    try {
        // Realistic processing stages
        const stages = [
            { text: 'Initializing AI engine...', progress: 10, duration: 800 },
            { text: 'Parsing and validating CSV data...', progress: 25, duration: 1200 },
            { text: 'Running fuzzy name matching algorithms...', progress: 50, duration: 1800 },
            { text: 'Analyzing transaction patterns...', progress: 75, duration: 1400 },
            { text: 'Calculating confidence scores...', progress: 90, duration: 1000 },
            { text: 'Generating reconciliation report...', progress: 100, duration: 600 }
        ];

        for (const stage of stages) {
            document.getElementById('progressFill').style.width = stage.progress + '%';
            document.getElementById('progressText').textContent = stage.text;
            await new Promise(resolve => setTimeout(resolve, stage.duration));
        }

        // Simulate API call
        await simulateReconciliation();
        
        // Show results
        setTimeout(() => {
            displayResults();
            trackEvent('reconciliation_completed', { 
                accuracy: reconciliationResults.summary.matchAccuracy,
                totalTransactions: reconciliationResults.summary.totalTransactions 
            });
        }, 500);

    } catch (error) {
        console.error('Reconciliation error:', error);
        showError('Reconciliation failed. Please try again or contact our support team.');
        resetToUpload();
        trackEvent('error_occurred', { error: error.message, step: 'reconciliation' });
    }
}

// Simulate reconciliation results
async function simulateReconciliation() {
    return new Promise(resolve => {
        reconciliationResults = {
            summary: {
                totalTransactions: 12,
                exactMatches: 8,
                fuzzyMatches: 3,
                unmatched: 1,
                matchAccuracy: 92,
                processingTime: 4850
            },
            matches: [
                {
                    posTransaction: { name: "Sarah Johnson", service: "Botox Cosmetic", amount: 450.00, date: "2024-03-15" },
                    rewardTransaction: { customer_name: "Sarah M Johnson", product: "Botox Cosmetic", points_redeemed: 90, redemption_date: "2024-03-15" },
                    matchType: "exact",
                    confidence: 0.98,
                    confidenceLabel: "High (98%)"
                },
                {
                    posTransaction: { name: "Jennifer Smith", service: "Dysport", amount: 380.00, date: "2024-03-16" },
                    rewardTransaction: { customer_name: "Jenny Smith", product: "Dysport", points_redeemed: 76, redemption_date: "2024-03-16" },
                    matchType: "fuzzy",
                    confidence: 0.87,
                    confidenceLabel: "High (87%)"
                },
                {
                    posTransaction: { name: "Michael Chen", service: "Juvederm Ultra", amount: 650.00, date: "2024-03-15" },
                    rewardTransaction: { customer_name: "Michael C Chen", product: "Juvederm Ultra", points_redeemed: 130, redemption_date: "2024-03-15" },
                    matchType: "exact",
                    confidence: 0.99,
                    confidenceLabel: "High (99%)"
                },
                {
                    posTransaction: { name: "Robert Davis", service: "Restylane Lyft", amount: 700.00, date: "2024-03-16" },
                    rewardTransaction: { member_name: "Robert J Davis", treatment: "Restylane Lyft", reward_amount: 140.00, transaction_date: "2024-03-16" },
                    matchType: "exact",
                    confidence: 0.96,
                    confidenceLabel: "High (96%)"
                }
            ],
            sampleUnmatched: [
                { name: "Amanda Taylor", service: "Juvederm Voluma", amount: 720.00, date: "2024-03-18" }
            ]
        };
        resolve();
    });
}

// Display results with animation
function displayResults() {
    updateStepIndicator('results');
    showSection('resultsSection');

    const summary = reconciliationResults.summary;
    
    // Update results subtitle
    document.getElementById('resultsSubtitle').textContent = 
        `Processed in ${(summary.processingTime / 1000).toFixed(1)} seconds with ${summary.matchAccuracy}% accuracy`;

    // Animate statistics
    animateCounter('totalTransactions', summary.totalTransactions, 1000);
    animateCounter('exactMatches', summary.exactMatches, 1200);
    animateCounter('fuzzyMatches', summary.fuzzyMatches, 1400);
    animateCounter('matchAccuracy', summary.matchAccuracy, 1600, '%');

    // Display matches after stats animation
    setTimeout(() => {
        displayMatches();
    }, 1800);
}

// Animate counter with easing
function animateCounter(elementId, target, duration, suffix = '') {
    const element = document.getElementById(elementId);
    const start = 0;
    const startTime = performance.now();
    
    function update() {
        const now = performance.now();
        const elapsed = now - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Easing function
        const easeOut = 1 - Math.pow(1 - progress, 3);
        const current = Math.floor(start + (target - start) * easeOut);
        
        element.textContent = current + suffix;
        
        if (progress < 1) {
            requestAnimationFrame(update);
        }
    }
    
    requestAnimationFrame(update);
}

// Display transaction matches
function displayMatches() {
    const matchesList = document.getElementById('matchesList');
    matchesList.innerHTML = '';

    reconciliationResults.matches.forEach((match, index) => {
        setTimeout(() => {
            const matchDiv = document.createElement('div');
            matchDiv.className = `match-item match-${match.matchType} fade-in`;
            
            matchDiv.innerHTML = `
                <div class="match-content">
                    <div class="match-details">
                        <div class="match-primary">
                            POS: ${match.posTransaction.name} - ${match.posTransaction.service} - $${match.posTransaction.amount}
                        </div>
                        <div class="match-secondary">
                            Reward: ${match.rewardTransaction.customer_name || match.rewardTransaction.member_name} - ${match.rewardTransaction.product || match.rewardTransaction.treatment}
                        </div>
                    </div>
                    <div class="confidence-badge ${
                        match.confidence >= 0.95 ? 'confidence-high' : 
                        match.confidence >= 0.75 ? 'confidence-medium' : 'confidence-low'
                    }">
                        ${match.confidenceLabel}
                    </div>
                </div>
            `;
            
            matchesList.appendChild(matchDiv);
        }, index * 200);
    });
}

// Export functionality
function exportResults(format) {
    if (!reconciliationResults) return;

    const exportData = [
        ['Match Type', 'POS Customer', 'POS Service', 'POS Amount', 'Reward Customer', 'Reward Product', 'Confidence', 'Status'],
        ...reconciliationResults.matches.map(match => [
            match.matchType.charAt(0).toUpperCase() + match.matchType.slice(1),
            match.posTransaction.name,
            match.posTransaction.service,
            `$${match.posTransaction.amount}`,
            match.rewardTransaction.customer_name || match.rewardTransaction.member_name,
            match.rewardTransaction.product || match.rewardTransaction.treatment,
            match.confidenceLabel,
            match.matchType === 'exact' ? 'Automatically Matched' : 'Fuzzy Match - Review Recommended'
        ]),
        ...reconciliationResults.sampleUnmatched.map(unmatched => [
            'Unmatched',
            unmatched.name,
            unmatched.service,
            `$${unmatched.amount}`,
            'No Match Found',
            '',
            'N/A',
            'Manual Review Required'
        ])
    ];

    const csvContent = exportData.map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
    downloadFile(csvContent, `medspasync-reconciliation-${format}.csv`, 'text/csv');

    trackEvent('report_exported', { format });
    
    // Show lead capture after export
    setTimeout(() => {
        showLeadModal();
    }, 1000);
}

// File download utility
function downloadFile(content, filename, contentType) {
    const blob = new Blob([content], { type: contentType });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.style.display = 'none';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
}

// UI state management
function updateStepIndicator(currentStep) {
    const steps = ['upload', 'processing', 'results'];
    const stepElements = ['step1', 'step2', 'step3'];
    
    stepElements.forEach((id, index) => {
        const element = document.getElementById(id);
        const step = steps[index];
        
        element.classList.remove('active', 'completed');
        
        if (step === currentStep) {
            element.classList.add('active');
        } else if (steps.indexOf(step) < steps.indexOf(currentStep)) {
            element.classList.add('completed');
        }
    });
}

function showSection(sectionId) {
    // Hide all sections
    ['uploadSection', 'processingSection', 'resultsSection'].forEach(id => {
        const section = document.getElementById(id);
        if (id === sectionId) {
            section.style.display = 'block';
        } else {
            section.style.display = 'none';
        }
    });
}

// Error handling
function showError(message) {
    document.getElementById('errorText').textContent = message;
    document.getElementById('errorMessage').style.display = 'block';
}

function hideError() {
    document.getElementById('errorMessage').style.display = 'none';
}

// Modal handling
function showLeadModal() {
    document.getElementById('leadModal').classList.add('show');
}

function hideLeadModal() {
    document.getElementById('leadModal').classList.remove('show');
}

// Lead capture
async function handleLeadCapture(e) {
    e.preventDefault();
    const formData = new FormData(e.target);
    const email = formData.get('email');
    const company = formData.get('company');

    const submitBtn = e.target.querySelector('.btn-primary');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Submitting...';
    submitBtn.disabled = true;

    try {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        trackEvent('lead_captured', { email, company });
        hideLeadModal();
        
        // Show success message
        alert('Thank you! Our team will contact you within 24 hours with personalized pricing and implementation details.');
        
    } catch (error) {
        console.error('Lead capture error:', error);
        alert('There was an error submitting your information. Please try again or contact us directly.');
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
}

// Reset to initial state
function resetToUpload() {
    updateStepIndicator('upload');
    showSection('uploadSection');
}

// Analytics tracking
async function trackEvent(event, data = {}) {
    try {
        console.log('📊 Demo event:', event, data);
        
        // In production, this would call your analytics API
        // await fetch('/api/track-event', { ... });
        
    } catch (error) {
        console.error('Analytics tracking error:', error);
    }
}

// Initialize demo when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Initialize button state
    updateReconcileButton();
    trackEvent('demo_loaded');
    
    // Add event listeners for file uploads
    document.getElementById('posUpload').addEventListener('click', function() {
        document.getElementById('posFile').click();
    });
    
    document.getElementById('alleUpload').addEventListener('click', function() {
        document.getElementById('alleFile').click();
    });
    
    document.getElementById('aspireUpload').addEventListener('click', function() {
        document.getElementById('aspireFile').click();
    });
    
    // File input change listeners
    document.getElementById('posFile').addEventListener('change', function(e) {
        if (e.target.files[0]) {
            handleFileUpload('pos', e.target.files[0]);
        }
    });
    
    document.getElementById('alleFile').addEventListener('change', function(e) {
        if (e.target.files[0]) {
            handleFileUpload('alle', e.target.files[0]);
        }
    });
    
    document.getElementById('aspireFile').addEventListener('change', function(e) {
        if (e.target.files[0]) {
            handleFileUpload('aspire', e.target.files[0]);
        }
    });
    
    // Sample data buttons
    document.getElementById('posSample').addEventListener('click', function(e) {
        e.stopPropagation();
        loadSampleData('pos');
    });
    
    document.getElementById('alleSample').addEventListener('click', function(e) {
        e.stopPropagation();
        loadSampleData('alle');
    });
    
    document.getElementById('aspireSample').addEventListener('click', function(e) {
        e.stopPropagation();
        loadSampleData('aspire');
    });
    
    // Reconcile button
    document.getElementById('reconcileBtn').addEventListener('click', startReconciliation);
    
    // Export buttons
    document.getElementById('exportCsv').addEventListener('click', function() {
        exportResults('csv');
    });
    
    document.getElementById('exportExcel').addEventListener('click', function() {
        exportResults('excel');
    });
    
    // CTA button
    document.getElementById('ctaBtn').addEventListener('click', function() {
        window.open('/pricing', '_blank');
    });
    
    // Error close button
    document.getElementById('errorClose').addEventListener('click', hideError);
    
    // Modal handling
    document.getElementById('leadForm').addEventListener('submit', handleLeadCapture);
    document.getElementById('skipBtn').addEventListener('click', hideLeadModal);
    
    // Close modal when clicking outside
    document.getElementById('leadModal').addEventListener('click', function(e) {
        if (e.target === this) {
            hideLeadModal();
        }
    });
});